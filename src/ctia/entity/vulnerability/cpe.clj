(ns ctia.entity.vulnerability.cpe
  "An abstraction for working with Common Platform Enumeration v2.3"
  (:require
   [clojure.string :as str]
   [version-clj.core :as v]
   [ctim.schemas.vulnerability :as vulnerability-schema]
   [schema.core :as s]))

(defn component-specified?
  "Returns true if component is not set to ANY or NA, otherwise
  false."
  [component]
  (let [ANY "*"
        NA  "-"]
    (and (not= component ANY)
         (not= component NA))))

(s/defschema CpeMatch
  {:part (s/enum "a" "h" "o")
   :vendor s/Str
   :product s/Str
   :version s/Str
   :version_update s/Str
   :edition s/Str
   :lang s/Str
   :sw_edition s/Str
   :target_sw s/Str
   :target_hw s/Str
   :other s/Str
   (s/optional-key :version-start-including) s/Str
   (s/optional-key :version-start-excluding) s/Str
   (s/optional-key :version-end-including) s/Str
   (s/optional-key :version-end-excluding) s/Str})

(def escape->internal
  "Mapping of escaped characters to internal representations to
  prevent conflicts when used within regular expressions."
  {"\\:" "_COLON_"
   "\\(" "_OPEN_PAREN_"
   "\\)" "_CLOSED_PAREN_"
   "\\+" "_PLUS_"
   "\\!" "_BANG_"
   "\\/" "_SLASH_"})

(defn ->internal
  "Replaces all escaped characters in String `s` with internal representations"
  [s]
  (reduce-kv (fn ->internal-representation-rf [acc escape internal-representation]
               (str/replace acc escape internal-representation))
             s
             escape->internal))

(defn internal->triple-escape
  "Replaces all internal representations in String `s` with their
  triple escaped forms."
  [s]
  (reduce-kv (fn internal->triple-escape-rf [acc escape internal-representation]
               (str/replace acc internal-representation (str "\\\\" escape)))
             s
             escape->internal))

(defn str->pattern
  "Converts String `s` with CPE Match String wildcards to a
  `java.util.regex.Pattern`."
  [s]
  (-> s
      (str/replace "*" ".*")
      (str/replace "?" ".?")
      re-pattern))

(defn component-match?
  "Returns true when CPE Match String components `s1` and `s2` match,
  otherwise false. When `s1` or `s2` is set to `*` or `-` returns
  true, indicating a match of `ANY` and `Not Applicable`
  respectively."
  [s1 s2]
  (let [p1 (str->pattern s1)
        p2 (str->pattern s2)]
    (or
      (= s1 s2)
      (re-matches p1 s2)
      (re-matches p2 s1))))

(defn satisfies-interval?
  "Returns true when version satisfies interval, otherwise
  false. Returns true when version is set to `*` or `-`, which
  indicate `ANY` and `Not Applicable` respectively."
  [version
   {:keys [version-start-including
           version-start-excluding
           version-end-including
           version-end-excluding]}]
  (letfn [(closed [] (and (left-closed) (right-closed)))
          (open [] (and (left-open) (right-open)))
          (left-closed-right-open [] (and (left-closed) (right-open)))
          (left-open-right-closed [] (and (left-open) (right-closed)))
          (left-closed [] (v/older-or-equal? version-start-including version))
          (left-open [] (v/older? version-start-excluding version))
          (right-closed [] (v/newer-or-equal? version-end-including version))
          (right-open [] (v/newer? version-end-excluding version))]
    (cond
      (or (= version "*") (= version "-")) true
      (and version-start-including version-end-including) (closed)
      (and version-start-excluding version-end-excluding) (open)
      (and version-start-including version-end-excluding) (left-closed-right-open)
      (and version-start-excluding version-end-including) (left-open-right-closed)
      version-start-including (left-closed)
      version-start-excluding (left-open)
      version-end-including (right-closed)
      version-end-excluding (right-open)
      :else true)))

(s/defn match?
  "Compares a `CpeMatch` with a `leaf-cpe-match` from a Vulnerability
  Configuration tree leaf"
  [{:keys [part vendor product version version_update
           edition lang sw_edition target_sw
           target_hw other]} :- CpeMatch
   leaf-cpe-match :- CpeMatch]
  (and (satisfies-interval? version leaf-cpe-match)
       (and leaf-cpe-match
            (component-match? part (:part leaf-cpe-match))
            (component-match? vendor (:vendor leaf-cpe-match))
            (component-match? product (:product leaf-cpe-match))
            (component-match? version (:version leaf-cpe-match))
            (component-match? version_update (:version_update leaf-cpe-match))
            (component-match? edition (:edition leaf-cpe-match))
            (component-match? lang (:lang leaf-cpe-match))
            (component-match? sw_edition (:sw_edition leaf-cpe-match))
            (component-match? target_sw (:target_sw leaf-cpe-match))
            (component-match? target_hw (:target_hw leaf-cpe-match))
            (component-match? other (:other leaf-cpe-match)))))

(s/defn ->cpe-match :- CpeMatch
  "Given a Cpe Match String `s`, creates a `CpeMatch` map."
  [s]
  (let [components (-> s
                       (str/replace "\\\\" "\\")
                       ->internal
                       (str/replace-first "cpe:2.3:" "")
                       (str/split #":"))]
    {:part (nth components 0)
     :vendor (nth components 1)
     :product (nth components 2)
     :version (nth components 3)
     :version_update (nth components 4)
     :edition (nth components 5)
     :lang (nth components 6)
     :sw_edition (nth components 7)
     :target_sw (nth components 8)
     :target_hw (nth components 9)
     :other (nth components 10)}))

(defn valid-formatted-cpe-23-string?
  "Returns true when CPE Match String `s` is a valid CPE 2.3 Match
  String and has specified required components."
  [s]
  (let [cpe-match-string (str/replace s "\\\\" "\\")]
    (if-let [cpe-match (when (vulnerability-schema/formatted-cpe-23-string? cpe-match-string)
                         (->cpe-match cpe-match-string))]
      (and (component-specified? (:part cpe-match))
           (component-specified? (:vendor cpe-match))
           (component-specified? (:product cpe-match)))
      false)))

(defn apply-operator
  "When value of `operator` is String `OR` or `AND`, applies
  respective boolean operator to collection `operands`. When applied
  boolean function is true returns `result`, otherwise returns nil."
  [{:keys [negate operands operator result]}]
  (let [boolean-fn (case operator
                     "OR" some
                     "AND" every?)]
    (cond-> (boolean-fn identity operands)
      negate not
      :finally (when result))))

(s/defn cpe_match->CpeMatch :- CpeMatch
  "Constructs a `CpeMatch` from a Vulnerability Configuration tree
  leaf."
  [{:keys [versionStartIncluding
           versionStartExcluding
           versionEndIncluding
           versionEndExcluding
           cpe23Uri]}]
  (cond-> (->cpe-match cpe23Uri)
    versionStartIncluding (assoc :version-start-including versionStartIncluding)
    versionStartExcluding (assoc :version-start-excluding versionStartExcluding)
    versionEndIncluding (assoc :version-end-including versionEndIncluding)
    versionEndExcluding (assoc :version-end-excluding versionEndExcluding)))

(defn query-cpe-matches
  "Returns Vulnerabilility Configuration tree leaf `cpe_match` if
  affected by `cpes`, otherwise returns nil."
  [{:keys [cpe_match negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (for [CpeMatch (map cpe_match->CpeMatch cpe_match)]
                               (some (fn match-uri? [x] (match? x CpeMatch))
                                     cpes))
                   :operator operator
                   :result cpe_match}))

(defn query-children
  "Returns Vulnerability Configuration tree leaf `children` if
  affected by `cpes`, otherwise returns nil."
  [{:keys [children negate operator]} cpes]
  (apply-operator {:negate negate
                   :operands (map (fn query-child [child]
                                    (query-cpe-matches child cpes))
                                  children)
                   :operator operator
                   :result children}))

(defn query-node
  "Returns Vulnerability Configuration `node` if affected by `cpes`,
  otherwise returns nil."
  [{:keys [children cpe_match] :as node} cpes]
  (cond
    (seq cpe_match) (query-cpe-matches node cpes)
    (seq children) (query-children node cpes)))

(defn vulnerabilities->ids
  "Given a collection of `cpes`, and a collection of `vulnerabilities`,
  returns a lazy sequence of ids of vulnerabilities with affected
  configurations."
  [cpes vulnerabilities]
  (letfn [(query-vulnerability
            [{{:keys [nodes]} :configurations
              id :id}]
            (when (seq (filter (fn node-matches? [node]
                                 (query-node node cpes))
                               nodes))
              id))]
    (keep query-vulnerability vulnerabilities)))
